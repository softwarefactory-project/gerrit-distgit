From 1b94c681c8a8e4a95bd75c78112fc4fadd5f2a98 Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Mon, 26 Mar 2018 06:31:30 +0000
Subject: [PATCH] Add InitSFUser method

---
 .../com/google/gerrit/pgm/init/InitModule.java     |   1 +
 .../com/google/gerrit/pgm/init/InitSFUser.java     | 149 +++++++++++++++++++++
 2 files changed, 150 insertions(+)
 create mode 100644 gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitSFUser.java

diff --git a/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitModule.java b/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitModule.java
index f6b7e6ae77..9924de885b 100644
--- a/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitModule.java
+++ b/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitModule.java
@@ -53,6 +53,7 @@ public class InitModule extends FactoryModule {
     }
     step().to(InitIndex.class);
     step().to(InitAuth.class);
+    step().to(InitSFUser.class);
     step().to(InitAdminUser.class);
     step().to(InitLabels.class);
     step().to(InitSendEmail.class);
diff --git a/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitSFUser.java b/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitSFUser.java
new file mode 100644
index 0000000000..12a223c568
--- /dev/null
+++ b/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/InitSFUser.java
@@ -0,0 +1,149 @@
+// Copyright (C) 2018 Red Hat
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package com.google.gerrit.pgm.init;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+import com.google.common.base.Strings;
+import com.google.gerrit.common.TimeUtil;
+import com.google.gerrit.extensions.client.AuthType;
+import com.google.gerrit.pgm.init.api.ConsoleUI;
+import com.google.gerrit.pgm.init.api.InitFlags;
+import com.google.gerrit.pgm.init.api.InitStep;
+import com.google.gerrit.reviewdb.client.Account;
+import com.google.gerrit.reviewdb.client.AccountGroup;
+import com.google.gerrit.reviewdb.client.AccountGroupMember;
+import com.google.gerrit.reviewdb.client.AccountGroupName;
+import com.google.gerrit.reviewdb.client.AccountSshKey;
+import com.google.gerrit.reviewdb.server.ReviewDb;
+import com.google.gerrit.server.account.AccountState;
+import com.google.gerrit.server.account.ExternalId;
+import com.google.gerrit.server.index.account.AccountIndex;
+import com.google.gerrit.server.index.account.AccountIndexCollection;
+import com.google.gwtorm.server.SchemaFactory;
+import com.google.inject.Inject;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import org.apache.commons.validator.routines.EmailValidator;
+
+public class InitSFUser implements InitStep {
+    private final ConsoleUI ui;
+    private final InitFlags flags;
+    private final VersionedAuthorizedKeysOnInit.Factory authorizedKeysFactory;
+    private final ExternalIdsOnInit externalIds;
+    private SchemaFactory<ReviewDb> dbFactory;
+    private AccountIndexCollection indexCollection;
+
+    @Inject
+    InitSFUser(
+               InitFlags flags,
+               ConsoleUI ui,
+               VersionedAuthorizedKeysOnInit.Factory authorizedKeysFactory,
+               ExternalIdsOnInit externalIds) {
+        this.flags = flags;
+        this.ui = ui;
+        this.authorizedKeysFactory = authorizedKeysFactory;
+        this.externalIds = externalIds;
+    }
+
+    @Override
+    public void run() {}
+
+    @Inject(optional = true)
+    void set(SchemaFactory<ReviewDb> dbFactory) {
+        this.dbFactory = dbFactory;
+    }
+
+    @Inject(optional = true)
+    void set(AccountIndexCollection indexCollection) {
+        this.indexCollection = indexCollection;
+    }
+
+    @Override
+    public void postRun() throws Exception {
+        String httpPassword = readHttpPassword();
+        if (httpPassword.isEmpty()) {
+            return ;
+        }
+        System.out.println("Creating Admin user");
+        try (ReviewDb db = dbFactory.open()) {
+            if (db.accounts().anyAccounts().toList().isEmpty()) {
+                Account.Id id = new Account.Id(db.nextAccountId());
+                String username = "admin";
+                String name = "Administrator";
+                AccountSshKey sshKey = readSshKey(id);
+                String email = readEmail();
+
+                List<ExternalId> extIds = new ArrayList<>(2);
+                extIds.add(ExternalId.createUsername(username, id, httpPassword));
+
+                if (email != null) {
+                    extIds.add(ExternalId.createEmail(id, email));
+                }
+                externalIds.insert(db, extIds);
+
+                Account a = new Account(id, TimeUtil.nowTs());
+                a.setFullName(name);
+                a.setPreferredEmail(email);
+                db.accounts().insert(Collections.singleton(a));
+
+                AccountGroupName adminGroupName =
+                    db.accountGroupNames().get(new AccountGroup.NameKey("Administrators"));
+                AccountGroupMember m =
+                    new AccountGroupMember(new AccountGroupMember.Key(id, adminGroupName.getId()));
+                db.accountGroupMembers().insert(Collections.singleton(m));
+
+                if (sshKey != null) {
+                    VersionedAuthorizedKeysOnInit authorizedKeys = authorizedKeysFactory.create(id).load();
+                    authorizedKeys.addKey(sshKey.getSshPublicKey());
+                    authorizedKeys.save("Add SSH key for initial admin user\n");
+                }
+
+                AccountGroup adminGroup = db.accountGroups().get(adminGroupName.getId());
+                AccountState as =
+                    new AccountState(
+                                     a, Collections.singleton(adminGroup.getGroupUUID()), extIds, new HashMap<>());
+                for (AccountIndex accountIndex : indexCollection.getWriteIndexes()) {
+                    accountIndex.replace(as);
+                }
+            }
+        }
+    }
+
+    private String readHttpPassword() throws IOException {
+        Path httpPasswordPath = Paths.get(System.getProperty("user.home"), ".init", "admin_http_password");
+        if (!Files.exists(httpPasswordPath)) {
+            return "";
+        }
+        return new String(Files.readAllBytes(httpPasswordPath), UTF_8).replaceAll("(\\r|\\n)", "");
+    }
+
+    private String readEmail() throws IOException {
+        Path emailPath = Paths.get(System.getProperty("user.home"), ".init", "admin_email");
+        return new String(Files.readAllBytes(emailPath), UTF_8).replaceAll("(\\r|\\n)", "");
+    }
+
+    private AccountSshKey readSshKey(Account.Id id) throws IOException {
+        Path sshKeyPath = Paths.get(System.getProperty("user.home"), ".init", "admin_ssh_key.pub");
+        String content = new String(Files.readAllBytes(sshKeyPath), UTF_8).replaceAll("(\\r|\\n)", "");
+        return new AccountSshKey(new AccountSshKey.Id(id, 1), content);
+    }
+}
-- 
2.16.1

